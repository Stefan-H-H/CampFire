scalar GraphQLDate

enum StatusType {
  New
  Assigned
  Fixed
  Closed
}

type Issue {
  _id: ID!
  id: Int!
  title: String!
  status: StatusType!
  owner: String
  effort: Int
  created: GraphQLDate!
  due: GraphQLDate
  description: String
}

type IssueCounts {
  owner: String!
  New: Int
  Assigned: Int
  Fixed: Int
  Closed: Int
}

type IssueListWithPages {
  issues: [Issue!]!
  pages: Int
}

type User {
  signedIn: Boolean!
  givenName: String
  name: String
  email: String
}

"Toned down Issue, used as inputs, without server generated values."
input IssueInputs {
  title: String!
  "Optional, if not supplied, will be set to 'New'"
  status: StatusType = New
  owner: String
  effort: Int
  due: GraphQLDate
  description: String
}

"""Inputs for issueUpdate: all are optional. Whichever is specified will
be set to the given value, undefined fields will remain unmodified."""
input IssueUpdateInputs {
  title: String
  status: StatusType
  owner: String
  effort: Int
  due: GraphQLDate
  description: String
}

##### Top level declarations
type Query {
  about: String!
  user: User!
  issueList(
    status: StatusType
    effortMin: Int
    effortMax: Int
    search: String
    page: Int = 1
  ): IssueListWithPages
  issue(id: Int!): Issue!
  issueCounts(
    status: StatusType
    effortMin: Int
    effortMax: Int
  ): [IssueCounts!]!

  contact(id: Int!): Contact!
  contactList(
    ownerEmail: String
    contactFrequency: frequency
    priority: priority
    familiarity: familiarity
    activeStatus: Boolean
    search: String
    page: Int = 1
  ): ContactsWithPages
}
type Mutation {
  setAboutMessage(message: String!): String
  issueAdd(issue: IssueInputs!): Issue!
  issueUpdate(id: Int!, changes: IssueUpdateInputs!): Issue!
  issueDelete(id: Int!): Boolean!
  issueRestore(id: Int!): Boolean!

  contactAdd(contact: ContactInputs!): Contact!
  contactUpdate(id: Int!, changes: ContactUpdateInputs!): Contact!
  contactDelete(id: Int!): Boolean!
  contactRestore(id: Int!): Boolean!
}

enum frequency {
  Weekly
  Biweekly
  Monthly
  Quarterly
  Biannual
  Yearly
  None
  Custom
}

enum priority {
  low
  medium
  high
}

enum familiarity {
  familiar
  unfamiliar
  intimate
  meaningful
}

type Contact {
  _id: ID!
  id: Int!
  name: String!
  company: String
  title: String
  contactFrequency: frequency!
  email: String
  phone: String
  LinkedIn: String
  priority: priority
  familiarity: familiarity
  contextSpace: String
  activeStatus: Boolean!
  lastContactDate: GraphQLDate
  nextContactDate: GraphQLDate
  notes: String
  ownerEmail: String
}

type ContactsWithPages {
  contacts: [Contact!]!
  pages: Int
}

"Toned down contact, used as inputs"
input ContactInputs {
  name: String!
  company: String
  title: String
  "if not supplied, will be set to 'None'"
  contactFrequency: frequency = None
  email: String
  phone: String
  LinkedIn: String
  priority: priority
  familiarity: familiarity
  contextSpace: String
  "if not supplied, will be set to 'true'"
  activeStatus: Boolean = true
  lastContactDate: GraphQLDate
  nextContactDate: GraphQLDate
  notes: String
  ownerEmail: String
}

"""Inputs for contactUpdate: all are optional. Whichever is specified will
be set to the given value, undefined fields will remain unmodified."""
input ContactUpdateInputs {
  name: String
  company: String
  title: String
  contactFrequency: frequency
  email: String
  phone: String
  LinkedIn: String
  priority: priority
  familiarity: familiarity
  contextSpace: String
  activeStatus: Boolean
  lastContactDate: GraphQLDate
  nextContactDate: GraphQLDate
  notes: String
  ownerEmail: String
}